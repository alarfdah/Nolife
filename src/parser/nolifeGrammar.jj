/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.8";
}
PARSER_BEGIN(NolifeParser)
package parser;

import ast.*;
import visitor.*;
import java.io.*;

public class NolifeParser {
  
  	private static ASTNodeFactory factory;

  	public static void main(String args[]) {
  	  	NolifeParser parser;
  	  	java.io.InputStream input;

  	  	if (args.length == 1) {
			try {
			  	input = new java.io.FileInputStream(args[args.length - 1]);
			} catch (java.io.FileNotFoundException e) {
			  	System.out.println("Filen not found.");
			  	return;
			} 
  	  	} else {
  	  	  	System.out.println("Usage: nsc <inputfile>");
  	  	  	return;
  	  	}

  	  	try {
  	  	  	factory = new ASTNodeFactory();
  	  	  	parser = new NolifeParser(input);
  	  	  	ASTNode node = parser.program();
//  	  	  	SourceVisitor sv = new SourceVisitor();
  	  	  	TreeVisitor tv = new TreeVisitor();
//			TypeVisitor tv = new TypeVisitor();
			node.accept(tv);
  	  	  	System.out.println(tv.getSource());
  	  	} catch (ParseException e) {
  	  	  	System.err.println("Syntax Error: " + e.getMessage());
  	  	}
  	} 
}

PARSER_END(NolifeParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
|   <"{"(~["}"])*"}">
} 

TOKEN : /* keywords */
{
    < O_MOD: "MOD">
    | <O_AND: "AND">
    | <O_ARRAY: "ARRAY">
    | <O_BEGIN: "BEGIN">
    | <O_CHARACTER: "CHARACTER">
    | <O_DO: "DO">
    | <O_ELSE: "ELSE">
    | <O_END: "END">
    | <O_FLOAT: "FLOAT">
    | <O_FUNCTION: "FUNCTION">
    | <O_IF: "IF">
    | <O_INTEGER: "INTEGER">
    | <O_NOT: "NOT">
    | <O_OF: "OF">
    | <O_OR: "OR">
    | <O_PROCEDURE: "PROCEDURE">
    | <O_PROGRAM: "PROGRAM">
    | <O_READ: "READ">
    | <O_RETURN: "RETURN">
    | <O_THEN: "THEN">
    | <O_VAR: "VAR">
    | <O_WHILE: "WHILE">
    | <O_WRITE: "WRITE">
    | <O_CASE: "CASE">
}

TOKEN : /* other lexical tokens */
{
  <O_LE: "<=">
| <O_LT: "<">
| <O_GE: ">=">
| <O_GT: ">">
| <O_EQ: "=">
| <O_NE: "<>">
| <O_ASSIGN: ":=">
| <O_COLON: ":">
| <O_SEMICOLON: ";">
| <O_COMMA: ",">
| <O_LBRACKET: "[">
| <O_RBRACKET: "]">
| <O_LPAREN: "(">
| <O_RPAREN: ")">
| < O_DOT: "." >
| <O_PLUS: "+">
| <O_MINUS: "-">
| <O_TIMES: "*">
| <O_CHAR: "'"~["'"]"'">
| <O_STRING: "'"~["'"](~["'"])+"'">
| <#DIGIT: ["0" - "9"] >
| <#ALPHA: ["a" - "z"] | ["A" - "Z"] >
| <O_IDENTIFIER: <ALPHA> (<ALPHA> | <DIGIT>)*>
| <#EXPONENT: ("e" | "E") ("+" | "-")? (<DIGIT>)+ >
| <O_FLOATCON: <O_INT> (< O_DOT > (<DIGIT>)+ (<EXPONENT>)? | <EXPONENT>) >
| <O_INT: "0" | ["1" - "9"](<DIGIT>)* >
}

ASTNode program(): 
{
  	ASTNode programNode = null;
  	ASTNode compoundStatement = null;
  	ASTNode varDeclsNode = null;
  	ASTNode subroutineDeclsNode = null;
  	Token progName = null;
}
{
  	{
   		programNode = (Program)factory.makeASTNode("Program");
  	}
   	<O_PROGRAM> progName = <O_IDENTIFIER> <O_SEMICOLON>
   	(
   	  	varDeclsNode = decls()
		{
		 	programNode.addChild(varDeclsNode);
		}
   	)?
   	(
     	subroutineDeclsNode = subprogram_decls()
     	{
     	  	programNode.addChild(subroutineDeclsNode);
     	}
   	)? 
   	compoundStatement = compound_stmt()
   	{
   	  	programNode.setLabel(progName.image);
     	programNode.addChild(compoundStatement);

     	return programNode;
   	}
   
}
    
ASTNode decls():
{
  	ASTNode varDeclsNode = null;
}
{
	<O_VAR> varDeclsNode = decl_list()
	{
	  	return varDeclsNode;
	}
}

ASTNode decl_list() : 
{
  	ASTNode declareNode = null;
  	VariableDeclarations varDeclsNode = null;
}
{
  	{
  	  	varDeclsNode = (VariableDeclarations)factory.makeASTNode("VariableDeclarations");
  	}
 	(
 	  	declareNode = identifier_list()
 		<O_COLON>
 		declareNode = type(declareNode)
 		<O_SEMICOLON>
 		{
 		  	varDeclsNode.addChild(declareNode);
 		}
 	)+
  	{
	  	return varDeclsNode;
	}
}

ASTNode identifier_list() : 
{
	Declare declareNode = null;
  	IdDecl idDeclNode = null;
  	Token id = null;
}
{
	id = <O_IDENTIFIER>
	{
	  	idDeclNode = (IdDecl)factory.makeASTNode("IdDecl");
	  	idDeclNode.setLabel(id.image);
		declareNode = (Declare)factory.makeASTNode("Declare");
	  	declareNode.addChild(idDeclNode);
	}
  	(
  	  	<O_COMMA>
	  	id = <O_IDENTIFIER>
	  	{
	  	  	idDeclNode = (IdDecl)factory.makeASTNode("IdDecl");
	  	  	idDeclNode.setLabel(id.image);
	  	  	declareNode.addChild(idDeclNode);
	  	}
  	)*
  	{
	  	return declareNode;
	}
}

ASTNode type(ASTNode declareNode) : 
{
  	ASTNode typeNode = null;
  	ASTNode newTypeNode = null;
  	Declare newDeclareNode = null;
  	ArrayDecl newArrayDeclNode = null;
}
{

  	( typeNode = standard_type()
  	{
  	  	newDeclareNode = (Declare)factory.makeASTNode("Declare");
  	  	
  	  	if (typeNode instanceof TypeInteger) {
  	  	  	for (ASTNode n : declareNode.getChildren()) {
	  	  	  	newTypeNode = (TypeInteger)factory.makeASTNode("TypeInteger");
	  	  	  	newTypeNode.addChild(n);
	  	  	  	newDeclareNode.addChild(newTypeNode);
  	  	 	}
  	  	} else if (typeNode instanceof TypeFloat) {
  	  	  	for (ASTNode n : declareNode.getChildren()) {
	  	  	  	newTypeNode = (TypeFloat)factory.makeASTNode("TypeFloat");
	  	  	  	newTypeNode.addChild(n);
	  	  	  	newDeclareNode.addChild(newTypeNode);
	  	  	 }
  	  	} else if (typeNode instanceof TypeCharacter) {
  	  	  	for (ASTNode n : declareNode.getChildren()) {
	  	  	  	newTypeNode = (TypeCharacter)factory.makeASTNode("TypeCharacter");
	  	  	  	newTypeNode.addChild(n);
	  	  	  	newDeclareNode.addChild(newTypeNode);
  	  	 	}
  	  	}
  	  	
  	  	return newDeclareNode;
	}
  	| typeNode = array_type()
  	{
  	  	newDeclareNode = (Declare)factory.makeASTNode("Declare");
  	  	if (typeNode instanceof TypeInteger) {
  	  	  	for (ASTNode n : declareNode.getChildren()) {
	  	  	  	newTypeNode = (TypeInteger)factory.makeASTNode("TypeInteger");
	  	  	  	newArrayDeclNode = (ArrayDecl)factory.makeASTNode("ArrayDecl");
	  	  	  	newArrayDeclNode.setLabel(n.getLabel());
	  	  	  	newArrayDeclNode.addChild(((ArrayDecl)typeNode.getChild(0)).getMinBound());
	  	  	  	newArrayDeclNode.addChild(((ArrayDecl)typeNode.getChild(0)).getMaxBound());
	  	  	  	newTypeNode.addChild(newArrayDeclNode);
	  	  	  	newDeclareNode.addChild(newTypeNode);
  	  	 	}
  	  	} else if (typeNode instanceof TypeFloat) {
  	  	  	for (ASTNode n : declareNode.getChildren()) {
	  	  	  	newTypeNode = (TypeFloat)factory.makeASTNode("TypeFloat");
	  	  	  	newArrayDeclNode = (ArrayDecl)factory.makeASTNode("ArrayDecl");
	  	  	  	newArrayDeclNode.setLabel(n.getLabel());
	  	  	  	newArrayDeclNode.addChild(((ArrayDecl)typeNode.getChild(0)).getMinBound());
	  	  	  	newArrayDeclNode.addChild(((ArrayDecl)typeNode.getChild(0)).getMaxBound());
	  	  	  	newTypeNode.addChild(newArrayDeclNode);
	  	  	  	newDeclareNode.addChild(newTypeNode);
	  	  	 }
  	  	} else if (typeNode instanceof TypeCharacter) {
  	  	  	for (ASTNode n : declareNode.getChildren()) {
	  	  	  	newTypeNode = (TypeCharacter)factory.makeASTNode("TypeCharacter");
	  	  	  	newArrayDeclNode = (ArrayDecl)factory.makeASTNode("ArrayDecl");
	  	  	  	newArrayDeclNode.setLabel(n.getLabel());
	  	  	  	newArrayDeclNode.addChild(((ArrayDecl)typeNode.getChild(0)).getMinBound());
	  	  	  	newArrayDeclNode.addChild(((ArrayDecl)typeNode.getChild(0)).getMaxBound());
	  	  	  	newTypeNode.addChild(newArrayDeclNode);
	  	  	  	newDeclareNode.addChild(newTypeNode);
  	  	 	}
  	  	}
	  	
	  	return newDeclareNode;
  	}
  	)
}

ASTNode standard_type() : 
{
  	Type typeNode = null;
  	Token type = null;
}
{
	( type = <O_INTEGER>
	{
	  	typeNode = (TypeInteger)factory.makeASTNode("TypeInteger");
	}
	| type = <O_FLOAT>
	{
	  	typeNode = (TypeFloat)factory.makeASTNode("TypeFloat");
	}
	| type = <O_CHARACTER>
	{
	  	typeNode = (TypeCharacter)factory.makeASTNode("TypeCharacter");
	}
	)
	{
	  	return typeNode;
	}
}

ASTNode array_type() : 
{
  	ASTNode arrayDeclNode = null;
  	ASTNode typeNode = null;
}
{
    <O_ARRAY> <O_LBRACKET> arrayDeclNode = dim() <O_RBRACKET> <O_OF> typeNode = standard_type()
    {
      	typeNode.addChild(arrayDeclNode);
	  	return typeNode;
	}
}

ASTNode dim() : 
{
  	Token minBound = null;
  	Token maxBound = null;
  	ArrayDecl arrayDeclNode = null;
  	Expression minNode = null;
  	Expression maxNode = null;
  	
}
{
	{
		arrayDeclNode = (ArrayDecl)factory.makeASTNode("ArrayDecl");
	}
	( minBound = <O_INT> <O_DOT> <O_DOT > maxBound = <O_INT>
	{
		minNode = (ConstantInteger)factory.makeASTNode("ConstantInteger");
		minNode.setLabel(minBound.image);
		maxNode = (ConstantInteger)factory.makeASTNode("ConstantInteger");
		maxNode.setLabel(maxBound.image);
	}
	| minBound = <O_CHAR> <O_DOT> <O_DOT > maxBound = <O_CHAR>
	{
	  	minNode = (ConstantCharacter)factory.makeASTNode("ConstantCharacter");
		minNode.setLabel(minBound.image);
		maxNode = (ConstantCharacter)factory.makeASTNode("ConstantCharacter");
		maxNode.setLabel(maxBound.image);
	}
	)
	{
	  	arrayDeclNode.addChild(minNode);
		arrayDeclNode.addChild(maxNode);
	  	return arrayDeclNode;
	}
}

ASTNode subprogram_decls() : 
{
  	SubroutineDeclarations subroutineDeclsNode = null;
  	ASTNode subroutineNode = null;
}
{
  	{
  	  	subroutineDeclsNode = (SubroutineDeclarations)factory.makeASTNode("SubroutineDeclarations");
  	}
	( subroutineNode = subprogram_decl() <O_SEMICOLON>
		{
		  	subroutineDeclsNode.addChild(subroutineNode);
		}
	)+
	{
	  	return subroutineDeclsNode;
	}
}

ASTNode subprogram_decl() : 
{
  	ASTNode subroutineNode = null;
  	ASTNode varDeclsNode = null;
  	ASTNode compoundStatementNode = null;
}
{
  	subroutineNode = subprogram_head()
  	(
  	  	varDeclsNode = decls()
  	  	{ 
	  	  	if (subroutineNode instanceof Type) {
	  	  	  ((Type)subroutineNode).getChild().addChild(varDeclsNode);
	  	  	} else if (subroutineNode instanceof Procedure) {
	  	  	  subroutineNode.addChild(varDeclsNode);
	  	  	}
  	 	}
  	)? compoundStatementNode = compound_stmt()
  	{
  	  	if (subroutineNode instanceof Type) {
  	  	  ((Type)subroutineNode).getChild().addChild(compoundStatementNode);
  	  	} else if (subroutineNode instanceof Procedure) {
  	  	  subroutineNode.addChild(compoundStatementNode);
  	  	}
	  	return subroutineNode;
	}
}

ASTNode subprogram_head() : 
{
  	Procedure procedureNode = null;
  	Function functionNode = null;
  	ASTNode parametersNode = null;
  	ASTNode typeNode = null;
  	Token id = null;
}
{
	( <O_FUNCTION> id = <O_IDENTIFIER> (parametersNode = arguments())? <O_COLON> typeNode = standard_type() <O_SEMICOLON>
	{
		functionNode = (Function)factory.makeASTNode("Function");
		functionNode.setLabel(id.image);
		functionNode.addChild(parametersNode);
		typeNode.addChild(functionNode);

		return typeNode;
	}
	| <O_PROCEDURE> id = <O_IDENTIFIER> (parametersNode = arguments())? <O_SEMICOLON>
	{
		procedureNode = (Procedure)factory.makeASTNode("Procedure");
		procedureNode.setLabel(id.image);
		procedureNode.addChild(parametersNode);
		
		return procedureNode;
	}
	)
}

ASTNode arguments() : 
{
  	ASTNode parametersNode = null;
}
{
  	<O_LPAREN> parametersNode = parameter_list() <O_RPAREN>
  	{
	  	return parametersNode;
	}
}

ASTNode parameter_list() : 
{
  	Parameters parametersNode = null;
  	ASTNode declareNode = null;
}
{
	declareNode = identifier_list() <O_COLON> declareNode = type(declareNode)
	{
  	  	parametersNode = (Parameters)factory.makeASTNode("Parameters");
		parametersNode.addChild(declareNode);
	}
    ( <O_SEMICOLON> declareNode = identifier_list() <O_COLON> declareNode = type(declareNode)
    	{
    	  	parametersNode.addChild(declareNode);
    	}
    )*
    {
      	
	  	return parametersNode;
	}
}

ASTNode compound_stmt() : 
{
  	ASTNode statementList = null;
  	
}
{
	<O_BEGIN> statementList = stmt_list() <O_END>
	{
	  	return statementList;
	}
}

ASTNode stmt_list() : 
{
  	ASTNode statement = null;
  	ASTNode compoundStatement = null;
}
{
	statement = stmt()
	{
	  	compoundStatement = (CompoundStatement)factory.makeASTNode("CompoundStatement");
	  	compoundStatement.addChild(statement);
	
	}
	( <O_SEMICOLON> statement = stmt()
	{
	  	compoundStatement.addChild(statement);
	}
	)*
	{
	  	return compoundStatement;
	}
}

ASTNode stmt() :
{
	ASTNode statement = null;
}

{
	( LOOKAHEAD(2)
		  statement = assignment()
  		| statement = if_stmt()
  		| statement = while_stmt()
  		| statement = procedure_invocation()
  		| statement = i_o_stmt()
  		| statement = compound_stmt()
  		| statement = return_stmt()
  		| statement = case_stmt()
	)
	{
	  	return statement;
	}
}

ASTNode assignment() :
{
  	ASTNode varNode = null;
  	ASTNode exprNode = null;
  	Assignment assignNode = null;
}
{
	varNode = variable() <O_ASSIGN> exprNode = expr()
	{
	  	assignNode = (Assignment)factory.makeASTNode("Assignment");
	  	assignNode.addChild(varNode);
	  	assignNode.addChild(exprNode);
	  	return assignNode;
	}
}

ASTNode if_stmt() :
{
  	ASTNode exprNode = null;
  	ASTNode statementNode = null;
  	ASTNode elseNode = null;
  	IfStatement ifNode = null;
}
{
	<O_IF> exprNode = expr()
	{
		ifNode = (IfStatement)factory.makeASTNode("IfStatement");
		ifNode.addChild(exprNode);
	}
	<O_THEN> statementNode = stmt()
	{
		ifNode.addChild(statementNode);
	}
	[
		LOOKAHEAD(<O_ELSE>)
		<O_ELSE> elseNode = stmt()
	]
	{
	  	ifNode.addChild(elseNode);
	}
	{
	  	return ifNode;
	}
}

ASTNode while_stmt() :
{
  	ASTNode exprNode = null;
  	ASTNode statementNode = null;
  	WhileStatement whileNode = null;
}
{
	<O_WHILE> exprNode = expr()
	{
	  	whileNode = (WhileStatement)factory.makeASTNode("WhileStatement");
	  	whileNode.addChild(exprNode);
	}
	<O_DO> statementNode = stmt()
	{
	  	whileNode.addChild(statementNode);
	  	return whileNode;
	}
}

ASTNode procedure_invocation() :
{
  	Token id = null;
  	ASTNode exprListNode = null;
  	Call callNode = null;
}
{
	id = <O_IDENTIFIER> <O_LPAREN> (exprListNode = expr_list())? <O_RPAREN>
	{
		callNode = (Call)factory.makeASTNode("Call");
		callNode.setLabel(id.image);
		callNode.addChild(exprListNode);
	  	return callNode;
	}
} 

ASTNode i_o_stmt() :
{
  	Read readNode = null;
  	Write writeNode = null;
  	ASTNode exprNode = null;
  	ASTNode defNode = null;
  	ASTNode refNode = null;
  	ASTNode varNode = null;
}
{
  	{
		readNode = (Read)factory.makeASTNode("Read");
  	  	writeNode = (Write)factory.makeASTNode("Write");
  	}
	( <O_READ> <O_LPAREN> defNode = variable() <O_RPAREN>
		{
		  	readNode.addChild(defNode);
		  	return readNode;
		}
	| <O_WRITE>	<O_LPAREN> ( exprNode = expr() | exprNode = string() ) <O_RPAREN>
	  	{
	  	  	writeNode.addChild(exprNode);
	  	  	return writeNode;
	  	}
	)
	
}

ASTNode return_stmt() :
{
  	ASTNode exprNode = null;
  	Return returnNode = null;
}
{
	<O_RETURN> exprNode = expr()
	{
	  	returnNode = (Return)factory.makeASTNode("Return");
	  	returnNode.addChild(exprNode);
	  	return returnNode;
	}
}

ASTNode case_stmt() :
{
  	ASTNode exprNode = null;
  	ASTNode casesNode = null;
  	CaseStatement caseStatementNode = null;
}
{
	{
		caseStatementNode = (CaseStatement)factory.makeASTNode("CaseStatement");
	}
	<O_CASE> exprNode = expr() <O_OF>
	{
	  	caseStatementNode.addChild(exprNode);
	}
	(
	  casesNode = cases()
	  {
	    	caseStatementNode.addChild(casesNode);
	  }
	)? <O_END>
	{
	  	return caseStatementNode;
	}
} 

ASTNode cases() :
{
  	ASTNode clauseNode = null;
  	Cases casesNode = null;
}
{
  	{
  	  	casesNode = (Cases)factory.makeASTNode("Cases");
  	}
	clauseNode = case_element()
	{
		casesNode.addChild(clauseNode);
	}
	( <O_SEMICOLON>
		clauseNode = case_element()
		{
			casesNode.addChild(clauseNode);
		}
	)*
	{
	  	return casesNode;
	}
}

ASTNode case_element() :
{
  	ASTNode clauseNode = null;
  	ASTNode statementNode = null;
}
{
  	clauseNode = case_labels() <O_COLON> statementNode = stmt()
  	{
  	  	clauseNode.addChild(statementNode);
	  	return clauseNode;
	}
}

ASTNode case_labels() : 
{
  	Clause clauseNode = null;
  	Token id = null;
}
{
  	{
  	  	clauseNode = (Clause)factory.makeASTNode("Clause");
  	}
	( id = < O_INT > { clauseNode.setLabel(id.image); }
	| id = < O_FLOATCON > { clauseNode.setLabel(id.image); })
	
	( <O_COMMA>
		( id = <O_INT> { clauseNode.setLabel(clauseNode.getLabel() + ", " + id.image); }
		| id = < O_FLOATCON > { clauseNode.setLabel(clauseNode.getLabel() + ", " + id.image); })
	)*
	{
	  	return clauseNode;
	}
}

ASTNode expr_list() : 
{
  	Parameters parametersNode = null;
  	ASTNode exprNode = null;
}
{
	exprNode = expr()
	{
	  	parametersNode = (Parameters)factory.makeASTNode("Parameters");
	  	parametersNode.addChild(exprNode);
	}
	( <O_COMMA> exprNode = expr() { parametersNode.addChild(exprNode); } )*
	{
	  	return parametersNode;
	}
	
}

ASTNode expr() :
{
  	ASTNode term1 = null;
  	ASTNode exprPrime = null;
}
{
	term1 = term1()
	exprPrime = exprPrime(term1)
	{
	  	return exprPrime;
	}
}

ASTNode exprPrime(ASTNode exprNode) : 
{
  	OR orNode = null;
  	AND andNode = null;
  	ASTNode term1Node = null;
}
{
	( <O_OR> term1Node = term1()
		{
			orNode = (OR)factory.makeASTNode("OR");
			orNode.addChild(exprNode);
			orNode.addChild(exprPrime(term1Node));
			return orNode;
		}
  	| <O_AND> term1Node = term1()
  		{
			andNode = (AND)factory.makeASTNode("AND");
			andNode.addChild(exprNode);
			andNode.addChild(exprPrime(term1Node));
			return andNode;
		}
  	|
  	{ return exprNode; }
  	)
}

ASTNode term1() :
{
  	ASTNode term2 = null;
  	ASTNode term1Prime = null;
}
{
	term2 = term2()
	term1Prime = term1Prime(term2)
	{
	  	return term1Prime;
	}
}

ASTNode term1Prime(ASTNode exprNode) :
{
  	Equal equalNode = null;
  	NotEqual notEqualNode = null;
  	LessThan lessThanNode = null;
  	LessThanEqual lessThanEqualNode = null;
  	GreaterThan greaterThanNode = null;
  	GreaterThanEqual greaterThanEqualNode = null;
  	ASTNode term2Node = null;
}
{
	( <O_LT> term2Node = term2()
		{
		  	lessThanNode = (LessThan)factory.makeASTNode("LessThan");
		  	lessThanNode.addChild(exprNode);
		  	lessThanNode.addChild(term1Prime(term2Node));
		  	return lessThanNode;
		}
	| <O_LE> term2Node = term2()
		{
		  	lessThanEqualNode = (LessThanEqual)factory.makeASTNode("LessThanEqual");
		  	lessThanEqualNode.addChild(exprNode);
		  	lessThanEqualNode.addChild(term1Prime(term2Node));
		  	return lessThanEqualNode;
		}
	| <O_GT> term2Node = term2()
		{
		  	greaterThanNode = (GreaterThan)factory.makeASTNode("GreaterThan");
		  	greaterThanNode.addChild(exprNode);
		  	greaterThanNode.addChild(term1Prime(term2Node));
		  	return greaterThanNode;
		}
	| <O_GE> term2Node = term2()
		{
		  	greaterThanEqualNode = (GreaterThanEqual)factory.makeASTNode("GreaterThanEqual");
		  	greaterThanEqualNode.addChild(exprNode);
		  	greaterThanEqualNode.addChild(term1Prime(term2Node));
		  	return greaterThanEqualNode;
		}
	| <O_NE> term2Node = term2()
		{
		  	notEqualNode = (NotEqual)factory.makeASTNode("NotEqual");
		  	notEqualNode.addChild(exprNode);
		  	notEqualNode.addChild(term1Prime(term2Node));
		  	return notEqualNode;
		}
	| <O_EQ> term2Node = term2()
		{
		  	equalNode = (Equal)factory.makeASTNode("Equal");
		  	equalNode.addChild(exprNode);
		  	equalNode.addChild(term1Prime(term2Node));
		  	return equalNode;
		}
	|
	{ return exprNode; }
	)
}

ASTNode term2() :
{
  	ASTNode term3 = null;
	ASTNode term2Prime = null;
	Add addNode = null;
}
{  	
	term3 = term3()
	term2Prime = term2Prime(term3)
	{
	    return term2Prime;
	}
}

ASTNode term2Prime(ASTNode exprNode) :
{
  	Add addNode = null;
  	Subtract subtractNode = null;
	ASTNode term3Node = null;
}
{
	( <O_PLUS>
		term3Node = term3()
		{
		  	addNode = (Add)factory.makeASTNode("Add");
		  	addNode.addChild(exprNode);
			addNode.addChild(term2Prime(term3Node));
			return addNode;
		}
	| <O_MINUS>
		term3Node = term3()
		{
			subtractNode = (Subtract)factory.makeASTNode("Subtract");
			subtractNode.addChild(exprNode);
			subtractNode.addChild(term2Prime(term3Node));
			return subtractNode;
		}
	
	|
	{ return exprNode; }
	)
}

ASTNode term3() :
{
  	ASTNode factor = null;
  	ASTNode term3Prime = null;
}
{
	factor = factor()
	term3Prime = term3Prime(factor)
	{
		return term3Prime;
	}
}  

ASTNode term3Prime(ASTNode exprNode) :
{
  	Multiply multiplyNode = null;
  	Modulo moduloNode = null;
  	ASTNode factorNode = null;
}
{
	( <O_TIMES>
		factorNode = factor()
		{
			multiplyNode = (Multiply)factory.makeASTNode("Multiply");
			multiplyNode.addChild(exprNode);
			multiplyNode.addChild(term3Prime(factorNode));
			return multiplyNode;
		}
	
	| <O_MOD>
		factorNode = factor()
		{
			moduloNode = (Modulo)factory.makeASTNode("Modulo");
			moduloNode.addChild(exprNode);
			moduloNode.addChild(term3Prime(factorNode));
			return moduloNode;
		}
	|
	{ return exprNode; }
	)
}

ASTNode factor() :
{
  	ArrayRef arrayRefNode = null;
  	ASTNode exprNode = null;
  	Call callNode = null;
  	NOT notNode = null;
  	ASTNode parametersNode = null;
  	Token id = null;
}
{
	(  id = <O_IDENTIFIER>
		{
			exprNode = (IdRef)factory.makeASTNode("IdRef");
	  		exprNode.setLabel(id.image);
		}
		( <O_LBRACKET> exprNode = expr() <O_RBRACKET>
			{
			  	arrayRefNode = (ArrayRef)factory.makeASTNode("ArrayRef");
			  	arrayRefNode.setLabel(id.image);
			  	arrayRefNode.addChild(exprNode);
			  	return arrayRefNode;
			}
		| <O_LPAREN> (parametersNode = expr_list())? <O_RPAREN>
			{
				callNode = (Call)factory.makeASTNode("Call");
				callNode.setLabel(id.image);
			  	callNode.addChild(parametersNode);
			  	return callNode;
			}
		)?
	| id = <O_INT>
		{
		  	exprNode = (ConstantInteger)factory.makeASTNode("ConstantInteger");
		  	exprNode.setLabel(id.image);
		}
	| id = <O_FLOATCON>
		{
		  	exprNode = (ConstantFloat)factory.makeASTNode("ConstantFloat");
		  	exprNode.setLabel(id.image);
		}
	| id = <O_CHAR>
		{
		  	exprNode = (ConstantCharacter)factory.makeASTNode("ConstantCharacter");
		  	exprNode.setLabel(id.image);
		}
	| <O_LPAREN> exprNode = expr() <O_RPAREN>
		{
		  	
		}
	| <O_NOT> exprNode = factor()
		{
			notNode = (NOT)factory.makeASTNode("NOT");
			notNode.addChild(exprNode);
			return notNode;
		}
	)
	{
		return exprNode;
	}
}

ASTNode variable() : 
{
  	ArrayDef arrayDefNode = null;
  	IdDef idDefNode = null;
  	ASTNode exprNode = null;
  	Token id = null;
}
{
	id = <O_IDENTIFIER>
	( <O_LBRACKET> exprNode = expr() <O_RBRACKET>
		{
		  	arrayDefNode = (ArrayDef)factory.makeASTNode("ArrayDef");
		  	arrayDefNode.setLabel(id.image);
		  	arrayDefNode.addChild(exprNode);
		  	return arrayDefNode; 	
		}
	)?
	{
	  	idDefNode = (IdDef) factory.makeASTNode("IdDef");
	  	idDefNode.setLabel(id.image);
	  	return idDefNode;
	}
}

ASTNode string() :
{
  	ConstantString constantString = null;
  	Token string = null;
}
{
  	string = <O_STRING>
	{
	  	constantString = (ConstantString)factory.makeASTNode("ConstantString");
	  	constantString.setLabel(string.image);
	  	return constantString;
	}
}
