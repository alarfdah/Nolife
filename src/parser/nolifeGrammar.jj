/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.8";
}
PARSER_BEGIN(NolifeParser)
package parser;

import ast.*;
import visitor.*;
import java.io.*;

public class NolifeParser {
  
  	private static ASTNodeFactory factory;

  	public static void main(String args[]) {
  	  	NolifeParser parser;
  	  	java.io.InputStream input;

  	  	if (args.length == 1) {
			try {
			  	input = new java.io.FileInputStream(args[args.length - 1]);
			} catch (java.io.FileNotFoundException e) {
			  	System.out.println("Filen not found.");
			  	return;
			} 
  	  	} else {
  	  	  	System.out.println("Usage: nsc <inputfile>");
  	  	  	return;
  	  	}

  	  	try {
  	  	  	factory = new ASTNodeFactory();
  	  	  	parser = new NolifeParser(input);
  	  	  	ASTNode node = parser.program();
  	  	  	SourceVisitor sv = new SourceVisitor();
  	  	  	node.accept(sv);
  	  	  	System.out.println(sv.getSource());
  	  	} catch (ParseException e) {
  	  	  	System.err.println("Syntax Error: " + e.getMessage());
  	  	}
  	} 
}

PARSER_END(NolifeParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
|   <"{"(~["}"])*"}">
} 

TOKEN : /* keywords */
{
    < O_MOD: "MOD">
    | <O_AND: "AND">
    | <O_ARRAY: "ARRAY">
    | <O_BEGIN: "BEGIN">
    | <O_CHARACTER: "CHARACTER">
    | <O_DO: "DO">
    | <O_ELSE: "ELSE">
    | <O_END: "END">
    | <O_FLOAT: "FLOAT">
    | <O_FUNCTION: "FUNCTION">
    | <O_IF: "IF">
    | <O_INTEGER: "INTEGER">
    | <O_NOT: "NOT">
    | <O_OF: "OF">
    | <O_OR: "OR">
    | <O_PROCEDURE: "PROCEDURE">
    | <O_PROGRAM: "PROGRAM">
    | <O_READ: "READ">
    | <O_RETURN: "RETURN">
    | <O_THEN: "THEN">
    | <O_VAR: "VAR">
    | <O_WHILE: "WHILE">
    | <O_WRITE: "WRITE">
    | <O_CASE: "CASE">
}

TOKEN : /* other lexical tokens */
{
  <O_LE: "<=">
| <O_LT: "<">
| <O_GE: ">=">
| <O_GT: ">">
| <O_EQ: "=">
| <O_NE: "<>">
| <O_ASSIGN: ":=">
| <O_COLON: ":">
| <O_SEMICOLON: ";">
| <O_COMMA: ",">
| <O_LBRACKET: "[">
| <O_RBRACKET: "]">
| <O_LPAREN: "(">
| <O_RPAREN: ")">
| < O_DOT: "." >
| <O_PLUS: "+">
| <O_MINUS: "-">
| <O_TIMES: "*">
| <O_CHAR: "'"~["'"]"'">
| <O_STRING: "'"~["'"](~["'"])+"'">
| <#DIGIT: ["0" - "9"] >
| <#ALPHA: ["a" - "z"] | ["A" - "Z"] >
| <O_IDENTIFIER: <ALPHA> (<ALPHA> | <DIGIT>)*>
| <#EXPONENT: ("e" | "E") ("+" | "-")? (<DIGIT>)+ >
| <O_FLOATCON: <O_INT> (< O_DOT > (<DIGIT>)+ (<EXPONENT>)? | <EXPONENT>) >
| <O_INT: "0" | ["1" - "9"](<DIGIT>)* >
}

ASTNode program(): 
{
  	ASTNode programNode = (Program)factory.makeASTNode("Program");
  	ASTNode compoundStatement = null;
  	ASTNode varDeclsNode = null;
  	Token progName = null;
}
{
   <O_PROGRAM> progName = <O_IDENTIFIER> <O_SEMICOLON>
   (
     	varDeclsNode = decls()
		{
		 	programNode.addChild(varDeclsNode);
		}
   )?
   (
     	subprogram_decls()
   )? 
   compoundStatement = compound_stmt()
   {
     	programNode.setLabel(progName.image);
     	programNode.addChild(compoundStatement);

     	return programNode;
   }
   
}
    
ASTNode decls():
{
  	Token var = null;
  	ASTNode varDeclsNode = null;
}
{
	var = <O_VAR> varDeclsNode = decl_list()
	{
	  	varDeclsNode.setLabel(var.image);
	  	return varDeclsNode;
	}
}

ASTNode decl_list() : 
{
  	ASTNode typeNode = null;
  	ASTNode declareNode = null;
  	VariableDeclarations varDeclsNode = null;
}
{
  	{
  	  	varDeclsNode = (VariableDeclarations)factory.makeASTNode("VariableDeclarations");
  	}
 	(
 	  	declareNode = identifier_list()
 		<O_COLON>
 		typeNode = type()
 		<O_SEMICOLON>
 		{
 		  	declareNode.addChild(typeNode);
 		  	varDeclsNode.addChild(declareNode);
 		}
 	)+
  	{
	  	return varDeclsNode;
	}
}

ASTNode identifier_list() : 
{
	Declare declareNode = null;
  	IdDecl idDeclNode = null;
  	Token id = null;
}
{
	id = <O_IDENTIFIER>
	{
		declareNode = (Declare)factory.makeASTNode("Declare");
	  	idDeclNode = (IdDecl)factory.makeASTNode("IdDecl");
	  	idDeclNode.setLabel(id.image);
	  	declareNode.addChild(idDeclNode);
	}
  	( <O_COMMA> id = <O_IDENTIFIER>
  	{
  	  	idDeclNode = (IdDecl)factory.makeASTNode("IdDecl");
  	  	idDeclNode.setLabel(id.image);
  	  	declareNode.addChild(idDeclNode);
  	}
  	)*
  	{
	  	return declareNode;
	}
}

ASTNode type() : 
{
  	ASTNode typeNode = null;
}
{
  	( typeNode = standard_type()
  	| typeNode = array_type()
  	)
  	{
	  	return typeNode;
	}
}

ASTNode standard_type() : 
{
  	Type typeNode = null;
  	Token type = null;
}
{
	( type = <O_INTEGER>
	{
	  	typeNode = (TypeInteger)factory.makeASTNode("TypeInteger");
	}
	| type = <O_FLOAT>
	{
	  	typeNode = (TypeFloat)factory.makeASTNode("TypeFloat");
	}
	| type = <O_CHARACTER>
	{
	  	typeNode = (TypeCharacter)factory.makeASTNode("TypeCharacter");
	}
	)
	{
	  	return typeNode;
	}
}

ASTNode array_type() : 
{
}
{
    <O_ARRAY> <O_LBRACKET> dim() <O_RBRACKET> <O_OF> standard_type()
    {
	  	return null;
	}
}

ASTNode dim() : 
{
}
{
	( <O_INT> <O_DOT> <O_DOT > <O_INT>
	| <O_CHAR> <O_DOT> <O_DOT > <O_CHAR> )
	{
	  	return null;
	}
}

ASTNode subprogram_decls() : 
{
}
{
	( subprogram_decl() <O_SEMICOLON> )+
	{
	  	return null;
	}
}

ASTNode subprogram_decl() : 
{
}
{
  	subprogram_head() (decls())? compound_stmt()
  	{
	  	return null;
	}
}

ASTNode subprogram_head() : 
{
}
{
	( <O_FUNCTION> <O_IDENTIFIER> (arguments())? <O_COLON> standard_type() <O_SEMICOLON>
	| <O_PROCEDURE> <O_IDENTIFIER> (arguments())? <O_SEMICOLON> )
	{
	  	return null;
	}
}

ASTNode arguments() : 
{
}
{
  	<O_LPAREN> parameter_list() <O_RPAREN>
  	{
	  	return null;
	}
}

ASTNode parameter_list() : 
{
}
{
	identifier_list() <O_COLON> type()
    ( <O_SEMICOLON> identifier_list() <O_COLON> type() )*
    {
	  	return null;
	}
}

ASTNode compound_stmt() : 
{
  	ASTNode statementList = null;
  	
}
{
	<O_BEGIN> statementList = stmt_list() <O_END>
	{
	  	return statementList;
	}
}

ASTNode stmt_list() : 
{
  	ASTNode statement = null;
  	ASTNode compoundStatement = null;
}
{
	statement = stmt()
	{
	  	compoundStatement = (CompoundStatement)factory.makeASTNode("CompoundStatement");
	  	compoundStatement.addChild(statement);
	
	}
	( <O_SEMICOLON> statement = stmt()
	{
	  	compoundStatement.addChild(statement);
	}
	)*
	{
	  	return compoundStatement;
	}
}

ASTNode stmt() :
{
	ASTNode statement = null;
}

{
	( LOOKAHEAD(2)
		 statement = assignment()
  		| statement = if_stmt()
  		| statement = while_stmt()
  		| statement = procedure_invocation()
  		| statement = i_o_stmt()
  		| statement = compound_stmt()
  		| statement = return_stmt()
  		| statement = case_stmt()
	)
	{
	  	return statement;
	}
}

ASTNode assignment() :
{
  	ASTNode varNode = null;
  	ASTNode exprNode = null;
  	Assignment assignNode = null;
}
{
	varNode = variable() <O_ASSIGN> exprNode = expr()
	{
	  	assignNode = (Assignment)factory.makeASTNode("Assignment");
	  	assignNode.addChild(varNode);
	  	assignNode.addChild(exprNode);
	  	return assignNode;
	}
}

ASTNode if_stmt() :
{
}
{
	<O_IF> expr() <O_THEN> stmt() 
	[LOOKAHEAD(<O_ELSE>) <O_ELSE> stmt()]
	{
	  	return null;
	}
}

ASTNode while_stmt() :
{
}
{
	<O_WHILE> expr() <O_DO> stmt()
	{
	  	return null;
	}
}

ASTNode procedure_invocation() :
{
}
{
	<O_IDENTIFIER> <O_LPAREN> (expr_list())? <O_RPAREN>
	{
	  	return null;
	}
} 

ASTNode i_o_stmt() :
{
  	Expression exprNode = null;
  	IdDef idDefNode = null;
  	Read readNode = null;
  	Write writeNode = null;
}
{
	( <O_READ> <O_LPAREN> {  idDefNode = (IdDef)variable(); } <O_RPAREN>
	{
		exprNode = (IdRef)factory.makeASTNode("IdRef");
		exprNode.setLabel(idDefNode.getId());
		readNode = (Read)factory.makeASTNode("Read");
		readNode.addChild(exprNode);
	}
	| <O_WRITE> <O_LPAREN> ( expr() | string()) <O_RPAREN> )
	{
	  	return readNode;
	}
}

ASTNode return_stmt() :
{
}
{
	<O_RETURN> expr()
	{
	  	return null;
	}
}

ASTNode case_stmt() :
{
}
{
	<O_CASE> expr() <O_OF> (cases())? <O_END>
	{
	  	return null;
	}
} 

ASTNode cases() :
{
}
{
	case_element() ( <O_SEMICOLON> case_element() )*
	{
	  	return null;
	}
}

ASTNode case_element() :
{
}
{
  	case_labels() <O_COLON> stmt()
  	{
	  	return null;
	}
}

ASTNode case_labels() : 
{
}
{
	( < O_INT > | < O_FLOATCON >) ( <O_COMMA> ( <O_INT> | < O_FLOATCON > ))*
	{
	  	return null;
	}
}

ASTNode expr_list() : 
{
}
{
	expr() ( <O_COMMA> expr() )*
	{
	  	return null;
	}
	
}

ASTNode expr() :
{
  	ASTNode term1 = null;
}
{
	term1 = term1() exprPrime()
	{
	  	return term1;
	}
}

ASTNode exprPrime() : 
{
}
{
	( <O_OR> term1() exprPrime()
  	| <O_AND> term1() exprPrime()
  	|
  	{ }
  	)
  	{
	  	return null;
	}
}

ASTNode term1() :
{
  	ASTNode term2 = null;
}
{
	term2 = term2() term1Prime()
	{
	  	return term2;
	}
}

ASTNode term1Prime() :
{
}
{
	( <O_LT> term2() term1Prime()
	| <O_LE> term2() term1Prime()
	| <O_GT> term2() term1Prime()
	| <O_GE> term2() term1Prime()
	| <O_NE> term2() term1Prime()
	| <O_EQ> term2() term1Prime()
	|
	{}
	)
	{
	  	return null;
	}
}

ASTNode term2() :
{
  	ASTNode term3 = null;
}
{
	term3 = term3() term2Prime()
	{
	  	return term3;
	}
}

ASTNode term2Prime() :
{
}
{
	( <O_PLUS> term3() term2Prime()
	| <O_MINUS> term3() term2Prime()
	|
	{ }
	)
	{
	  	return null;
	}
}

ASTNode term3() :
{
  	ASTNode factor = null;
}
{
	factor = factor() term3Prime()
	{
		return factor;
	}
}  

ASTNode term3Prime() :
{
}
{
	( <O_TIMES> factor() term3Prime()
	| <O_MOD> factor() term3Prime()
	|
	{ }
	)
	{
		return null;
	}
}

ASTNode factor() :
{
  	ASTNode varNode = null;
  	Token var = null;
  	
}
{
	(  var = <O_IDENTIFIER>
		{
	  	varNode = (IdRef)factory.makeASTNode("IdRef");
	  	varNode.setLabel(var.image);
	  	return varNode;
		}
		( <O_LBRACKET> expr() <O_RBRACKET> | <O_LPAREN> (expr_list())? <O_RPAREN> )?
	| <O_INT>
	| <O_FLOATCON>
	| <O_CHAR>
	| <O_LPAREN> expr() <O_RPAREN>
	| <O_NOT> factor()
	)
}

ASTNode variable() : 
{
  	IdDef idDefNode = null;
  	Token id = null;
}
{
	id = <O_IDENTIFIER> ( <O_LBRACKET> expr() <O_RBRACKET> )?
	{
	  	idDefNode = (IdDef) factory.makeASTNode("IdDef");
	  	idDefNode.setLabel(id.image);

	  	return idDefNode;
	}
}

ASTNode string() :
{
}
{
  	<O_STRING>
	{
	  	return null;
	}
}
